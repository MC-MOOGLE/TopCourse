import webbrowser

"""–Ø –∑–Ω–∞—é, —á—Ç–æ –º—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ —Ä–µ—à–∞—Ç—å —ç—Ç–æ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª—ã for –∏ —É—Å–ª–æ–≤–∏—è, –Ω–æ —è –Ω–µ —Ö–æ—Ç–µ–ª —Ç—Ä–∞—Ç–∏—Ç—å —á–∞—Å –Ω–∞ —Ä—É—á–Ω–æ–π —Ç—Ä—É–¥,
–ø–æ—ç—Ç–æ–º—É –ø–æ—Ç—Ä–∞—Ç–∏–ª 4 —á–∞—Å–∞ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ —Å–ø–æ—Å–æ–±–Ω–∞ –≤—ã–≤–µ—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω—ã–π –Ω–∞–º –ø—Ä–∏–º–µ—Ä –≤ –∑–∞–¥–∞–Ω–∏–∏ üëç"""

matrix = {"–∞": [1,1,1,
                0,1,1,
                0,0,1],

        "–±":    [1,0,0,
                 1,1,0,
                 1,1,1],

        "–≤":    [1,1,1,
                 0,1,0,
                 0,0,0],
        
        "–≥":    [0,0,0,
                 0,1,0,
                 1,1,1],

        "–¥":     [1,1,1,
                  0,1,0,
                  1,1,1],

        "–µ":    [1,0,1,
                 1,1,1,
                 1,0,1],

        "–∂":     [1,0,0,
                 1,1,0,
                 1,0,0],

        "–∑":    [0,0,1,
                 0,1,1,
                 0,0,1],

        "–∏":    [1,1,1,
                1,1,0,
                1,0,0],
                
        "–∫":     [0,0,1,
                  0,1,1,
                  1,1,1]}

def printsquare(leng, squrei):
    if leng < 3:
        leng = 3
    localmatrix = matrix[squrei]
    tile = int(leng/3) # –¢. –∫ —è –∏—Å–ø–æ–ª—å–∑—É—é –º–∞—Ç—Ä–∏—Ü—ã 3—Ö3, —á–∏—Å–ª–æ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—Ç –æ–∫—Ä—É–≥–ª—è—Ç—Å—è –∫ –±–ª–∏–∑–∂–∞–π—à–µ–º—É —á–∏—Å–ª—É / 3
    for row in range(3):
        a = row * 3
        for i in range(tile):
            u = d = l = r = 0
            for j in range(3):
                indx = a + j
                grad = 1
                mirror = False
                sidemirror = False
                center = False

                # –ù–∞—Ö–æ–¥–∏–º —Å–æ—Å–µ–¥–µ–π
                if indx > 2:
                    u = localmatrix[indx - 3]
                if indx < 6:
                    d = localmatrix[indx + 3]
                if indx and indx != 3 and indx != 6:
                    l = localmatrix[indx - 1] 
                if indx != 2 and indx != 5 and indx != 8:
                    r = localmatrix[indx + 1]

                # –§–æ—Ä–º—É–ª—ã —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ (–ø–æ–¥–±–∏—Ä–∞–ª –º–µ—Ç–æ–¥–æ–º —Ç—ã–∫–∞)
                if d and not u:
                    if l and not r or r and not l:
                        grad = (i + 1) / tile
                elif u and not d:
                    if l and not r or r and not l:
                        grad = 1 - (i / tile)

                # –ó–µ—Ä–∫–∞–ª–∏–º, –µ—Å–ª–∏ –Ω–∞–¥–æ
                if l and not r:
                    mirror = False
                else:
                    mirror = True

                # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —É–≥–ª–æ–≤—ã—Ö

                # –ó–∞–ø–æ–ª–µ–Ω–Ω—ã–µ —É–≥–ª–æ–≤—ã–µ
                if indx == 0 and d and r:
                    grad = 1
                elif indx == 2 and d and l:
                    grad = 1 # –ù–µ —Ö–æ—á—É –ø–∏—Å–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ —É—Å–ª–æ–≤–∏—è, –º–Ω–µ –ø—Ä–æ—â–µ ctrl c v —Å–¥–µ–ª–∞—Ç—å
                elif indx == 6 and u and r:
                    grad = 1
                elif indx == 8 and u and l:
                    grad = 1

                # –£–≥–ª–æ—ã–≤–µ –ø–æ–¥ –Ω–∞–∫–ª–æ–Ω–æ–º
                if indx == 0 and d and not r:
                    grad = (i + 1) / tile
                    mirror = False
                elif indx == 2 and d and not l:
                    pass
                elif indx == 6 and u and not r:
                    grad = 1 - (i / tile)
                    mirror = False
                elif indx == 8 and u and not l:
                    pass

                if indx == 0 and not d and r:
                    grad = 1 - (i / tile)
                elif indx == 2 and not d and l:
                    grad = 1 - (i / tile)
                    mirror = False
                elif indx == 6 and not u and r:
                    grad = (i + 1) / tile
                    mirror = True
                elif indx == 8 and not u and l:
                    grad = (i + 1) / tile
                    mirror = False


                # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö

                if indx == 4:

                    # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö

                    if u and not (d or l or r):
                        grad = 1 - (i / tile)
                        center = True
                    elif d and not (u or l or r):
                        grad = (i + 1) / tile
                        center = True
                    elif l and not (u or d or r):
                        if i / tile <= 0.5:
                            grad = (i + 1) / tile
                        else:
                            grad = 1 - (i / tile)
                    elif r and not (u or d or l):
                        if i / tile <= 0.5:
                            grad = (i + 1) / tile
                        else:
                            grad = 1 - (i / tile)
                    
                    # –ò—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –∑–µ—Ä–∫–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã—Ö

                    if u and d and not (l or r):
                        if i / tile >= 0.5:
                            grad = (i + 1) / tile
                        else:
                            grad = 1 - (i / tile)
                        center = True
                    elif r and l and not (u or d):
                        if i / tile >= 0.5:
                            grad = 1 - (i / tile)  
                        else:
                            grad = (i + 1) / tile
                        center = True
                        center = True
                        sidemirror = True

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª-–≤–æ —Ç–æ—á–µ–∫ –∏ –ø—Ä–æ–±–µ–ª–æ–≤
                dots = int(((localmatrix[indx]) * tile * (grad + 0.001)))  # (grad - 0.001) –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏–∑-–∑–∞ –Ω–µ—Ç–æ—á–Ω–æ—Å—Ç–∏ –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–∏, –æ–Ω 0.99999998 –æ–∫—Ä—É–≥–ª—è–µ—Ç –¥–æ 0
                spaces = min((int(int(not (localmatrix[indx])) * tile + tile * (1 - (grad - 0.001)))), tile) # Min, —á—Ç–æ–±—ã –Ω–µ –≤—ã–ª–∞–∑–∏–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
                # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –≤ –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É —Å–∫–æ—Å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–∞–∑–Ω—ã–µ –ø—Ä–∏–Ω—Ç—ã
                if not center:
                    if not mirror:
                        print(f'{"* " * dots}{"  " * spaces}', end="")
                    else:
                        print(f'{"  " * spaces}{"* " * dots}', end="") 
                else:
                    # –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∑–µ—Ä–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                    if sidemirror:
                        if dots * 2 <= tile:
                            print(f'{"* " * dots}', end="")
                        else:
                            print(f'{"* " * (dots - 1)}', end="")
                        print(f'{"  " * int(spaces - dots)}{"* " * dots}', end="") 
                    else:
                        print(f'{"  " * spaces}{"* " * int(dots - spaces)}', end="") 
                                        
            print()


# for i in range(1, 20, 3):
#     for j in ["–∞", "–±", "–≤", "–≥", "–¥", "–µ", "–∂", "–∑", "–∏", "–∫"]:
#         printsquare(i, j)
#         print("\n")

# –Ø —Ä–µ—à–∏–ª –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ–π –º–æ–¥—É–ª—å —Ä–∞–¥–∏ –æ–¥–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
side = int(input(f"""–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞
\033[31m{("–ó–Ω–∞—á–µ–Ω–∏–µ –æ–∫—Ä—É–≥–ª–∏—Ç—Å—è –≤ –º–µ–Ω—å—à—É—é —Å—Ç–æ—Ä–æ–Ω—É –¥–æ —á–∏—Å–ª–∞, –¥–µ–ª—è—â–µ–≥–æ—Å—è –Ω–∞ 3")}\033[0m: """))
if str(input("–û—Ç–∫—Ä—ã—Ç—å —Ç–∞–±–ª–∏—Ü—É –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ (–Ω–µ –∫–æ—Ä–Ω–µ–π)? y/n: ")).lower() == "y":
    webbrowser.open("https://github.com/MC-MOOGLE/TopCourse/blob/main/Python/23.11.21/Squares.png")
while True:
    figure = str(input("""–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ñ–∏–≥—É—Ä—ã
–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–µ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: """))
    if figure in ["–∞", "–±", "–≤", "–≥", "–¥", "–µ", "–∂", "–∑", "–∏", "–∫"]:
        printsquare(side, figure)
    else:
        break
    side = int(input(f"–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–≤–∞–¥—Ä–∞—Ç–∞:")) # –í—ã–Ω–µ—Å –æ—Ç–¥–µ–ª—å–Ω–æ, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –Ω–∞–¥–æ–µ–¥–ª–∏–≤–æ–µ
